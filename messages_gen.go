package wrp

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(17)
	var zb0001Mask uint32 /* 17 bits */
	_ = zb0001Mask
	if z.Source == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Destination == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.TransactionUUID == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.ContentType == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Accept == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Status == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	if z.RequestDeliveryResponse == nil {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.Headers == nil {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.Metadata == nil {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.Path == "" {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.Payload == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	if z.ServiceName == "" {
		zb0001Len--
		zb0001Mask |= 0x1000
	}
	if z.URL == "" {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.PartnerIDs == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.SessionID == "" {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "msg_type"
		o = append(o, 0xa8, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65)
		o = msgp.AppendInt64(o, int64(z.Type))
		if (zb0001Mask & 0x2) == 0 { // if not omitted
			// string "source"
			o = append(o, 0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
			o = msgp.AppendString(o, z.Source)
		}
		if (zb0001Mask & 0x4) == 0 { // if not omitted
			// string "dest"
			o = append(o, 0xa4, 0x64, 0x65, 0x73, 0x74)
			o = msgp.AppendString(o, z.Destination)
		}
		if (zb0001Mask & 0x8) == 0 { // if not omitted
			// string "transaction_uuid"
			o = append(o, 0xb0, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64)
			o = msgp.AppendString(o, z.TransactionUUID)
		}
		if (zb0001Mask & 0x10) == 0 { // if not omitted
			// string "content_type"
			o = append(o, 0xac, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65)
			o = msgp.AppendString(o, z.ContentType)
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "accept"
			o = append(o, 0xa6, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74)
			o = msgp.AppendString(o, z.Accept)
		}
		if (zb0001Mask & 0x40) == 0 { // if not omitted
			// string "status"
			o = append(o, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
			if z.Status == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendInt64(o, *z.Status)
			}
		}
		if (zb0001Mask & 0x80) == 0 { // if not omitted
			// string "rdr"
			o = append(o, 0xa3, 0x72, 0x64, 0x72)
			if z.RequestDeliveryResponse == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendInt64(o, *z.RequestDeliveryResponse)
			}
		}
		if (zb0001Mask & 0x100) == 0 { // if not omitted
			// string "headers"
			o = append(o, 0xa7, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Headers)))
			for za0001 := range z.Headers {
				o = msgp.AppendString(o, z.Headers[za0001])
			}
		}
		if (zb0001Mask & 0x200) == 0 { // if not omitted
			// string "metadata"
			o = append(o, 0xa8, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
			o = msgp.AppendMapHeader(o, uint32(len(z.Metadata)))
			for za0002, za0003 := range z.Metadata {
				o = msgp.AppendString(o, za0002)
				o = msgp.AppendString(o, za0003)
			}
		}
		if (zb0001Mask & 0x400) == 0 { // if not omitted
			// string "path"
			o = append(o, 0xa4, 0x70, 0x61, 0x74, 0x68)
			o = msgp.AppendString(o, z.Path)
		}
		if (zb0001Mask & 0x800) == 0 { // if not omitted
			// string "payload"
			o = append(o, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
			o = msgp.AppendBytes(o, z.Payload)
		}
		if (zb0001Mask & 0x1000) == 0 { // if not omitted
			// string "service_name"
			o = append(o, 0xac, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
			o = msgp.AppendString(o, z.ServiceName)
		}
		if (zb0001Mask & 0x2000) == 0 { // if not omitted
			// string "url"
			o = append(o, 0xa3, 0x75, 0x72, 0x6c)
			o = msgp.AppendString(o, z.URL)
		}
		if (zb0001Mask & 0x4000) == 0 { // if not omitted
			// string "partner_ids"
			o = append(o, 0xab, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73)
			o = msgp.AppendArrayHeader(o, uint32(len(z.PartnerIDs)))
			for za0004 := range z.PartnerIDs {
				o = msgp.AppendString(o, z.PartnerIDs[za0004])
			}
		}
		if (zb0001Mask & 0x8000) == 0 { // if not omitted
			// string "session_id"
			o = append(o, 0xaa, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
			o = msgp.AppendString(o, z.SessionID)
		}
		// string "qos"
		o = append(o, 0xa3, 0x71, 0x6f, 0x73)
		o = msgp.AppendInt(o, int(z.QualityOfService))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "msg_type":
			{
				var zb0002 int64
				zb0002, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = MessageType(zb0002)
			}
		case "source":
			z.Source, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "dest":
			z.Destination, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "transaction_uuid":
			z.TransactionUUID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionUUID")
				return
			}
		case "content_type":
			z.ContentType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContentType")
				return
			}
		case "accept":
			z.Accept, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Accept")
				return
			}
		case "status":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Status = nil
			} else {
				if z.Status == nil {
					z.Status = new(int64)
				}
				*z.Status, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
			}
		case "rdr":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RequestDeliveryResponse = nil
			} else {
				if z.RequestDeliveryResponse == nil {
					z.RequestDeliveryResponse = new(int64)
				}
				*z.RequestDeliveryResponse, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RequestDeliveryResponse")
					return
				}
			}
		case "headers":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Headers")
				return
			}
			if cap(z.Headers) >= int(zb0003) {
				z.Headers = (z.Headers)[:zb0003]
			} else {
				z.Headers = make([]string, zb0003)
			}
			for za0001 := range z.Headers {
				z.Headers[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Headers", za0001)
					return
				}
			}
		case "metadata":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if z.Metadata == nil {
				z.Metadata = make(map[string]string, zb0004)
			} else if len(z.Metadata) > 0 {
				for key := range z.Metadata {
					delete(z.Metadata, key)
				}
			}
			for zb0004 > 0 {
				var za0002 string
				var za0003 string
				zb0004--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metadata")
					return
				}
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metadata", za0002)
					return
				}
				z.Metadata[za0002] = za0003
			}
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "service_name":
			z.ServiceName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServiceName")
				return
			}
		case "url":
			z.URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "partner_ids":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PartnerIDs")
				return
			}
			if cap(z.PartnerIDs) >= int(zb0005) {
				z.PartnerIDs = (z.PartnerIDs)[:zb0005]
			} else {
				z.PartnerIDs = make([]string, zb0005)
			}
			for za0004 := range z.PartnerIDs {
				z.PartnerIDs[za0004], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PartnerIDs", za0004)
					return
				}
			}
		case "session_id":
			z.SessionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SessionID")
				return
			}
		case "qos":
			{
				var zb0006 int
				zb0006, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "QualityOfService")
					return
				}
				z.QualityOfService = QOSValue(zb0006)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 3 + 9 + msgp.Int64Size + 7 + msgp.StringPrefixSize + len(z.Source) + 5 + msgp.StringPrefixSize + len(z.Destination) + 17 + msgp.StringPrefixSize + len(z.TransactionUUID) + 13 + msgp.StringPrefixSize + len(z.ContentType) + 7 + msgp.StringPrefixSize + len(z.Accept) + 7
	if z.Status == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 4
	if z.RequestDeliveryResponse == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Headers {
		s += msgp.StringPrefixSize + len(z.Headers[za0001])
	}
	s += 9 + msgp.MapHeaderSize
	if z.Metadata != nil {
		for za0002, za0003 := range z.Metadata {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.StringPrefixSize + len(za0003)
		}
	}
	s += 5 + msgp.StringPrefixSize + len(z.Path) + 8 + msgp.BytesPrefixSize + len(z.Payload) + 13 + msgp.StringPrefixSize + len(z.ServiceName) + 4 + msgp.StringPrefixSize + len(z.URL) + 12 + msgp.ArrayHeaderSize
	for za0004 := range z.PartnerIDs {
		s += msgp.StringPrefixSize + len(z.PartnerIDs[za0004])
	}
	s += 11 + msgp.StringPrefixSize + len(z.SessionID) + 4 + msgp.IntSize
	return
}
